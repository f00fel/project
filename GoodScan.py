from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler
from telegram.ext import filters
from pyzbar.pyzbar import decode
from PIL import Image
import io
import logging
import requests
import json
import re
import hashlib
import asyncio
import aiohttp

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8183275871:AAH13XOFrl7a9fe53mDFPEo9HfGju-V9VHw"
OPENROUTER_API_KEY = "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"
SITE_URL = "https://t.me/GoodScan1_bot"
SITE_NAME = "GoodScan"


class RussianBarcodeBot:
    def __init__(self):
        self.application = Application.builder().token(TOKEN).build()
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        self.application.add_handler(CallbackQueryHandler(self.handle_analysis_button, pattern="^analyze_"))

        self.allergens = [
            '–≥–ª—é—Ç–µ–Ω', '–∞—Ä–∞—Ö–∏—Å', '–æ—Ä–µ—Ö–∏', '—Ñ—É–Ω–¥—É–∫', '–º–∏–Ω–¥–∞–ª—å', '–∫–µ—à—å—é', '—Ñ–∏—Å—Ç–∞—à–∫–∏',
            '–≥—Ä–µ—Ü–∫–∏–π –æ—Ä–µ—Ö', '–∫–æ–∫–æ—Å', '–º–æ–ª–æ–∫–æ', '–ª–∞–∫—Ç–æ–∑–∞', '—è–π—Ü–∞', '—è–∏—á–Ω—ã–π –±–µ–ª–æ–∫',
            '—è–∏—á–Ω—ã–π –∂–µ–ª—Ç–æ–∫', '—Å–æ—è', '–≥–æ—Ä—á–∏—Ü–∞', '—Å–µ–ª—å–¥–µ—Ä–µ–π', '–∫—É–Ω–∂—É—Ç', '—Å—É–ª—å—Ñ–∏—Ç—ã',
            '–º–æ–ª–ª—é—Å–∫–∏', '—Ä–∞–∫–æ–æ–±—Ä–∞–∑–Ω—ã–µ', '—Ä—ã–±–∞', '–ø—à–µ–Ω–∏—Ü–∞', '—Ä–∂–∞', '—è—á–º–µ–Ω—å', '–æ–≤—ë—Å',
            '—à–æ–∫–æ–ª–∞–¥', '–∫–∞–∫–∞–æ', '–∫–æ—Ñ–µ', '—Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ', '–∫–ª—É–±–Ω–∏–∫–∞', '–ø–µ—Ä—Å–∏–∫–∏', '–∫–∏–≤–∏',
            '–∞–Ω–∞–Ω–∞—Å', '–º–∞–Ω–≥–æ', '–±–∞–Ω–∞–Ω—ã', '–∞–≤–æ–∫–∞–¥–æ', '–ø–æ–º–∏–¥–æ—Ä—ã', '–±–∞–∫–ª–∞–∂–∞–Ω—ã', '–ø–µ—Ä–µ—Ü'
        ]

        self.product_cache = {}

    def _generate_product_key(self, product_info):
        data = f"{product_info['name']}_{product_info['brand']}_{product_info['composition']}"
        return hashlib.md5(data.encode()).hexdigest()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –†–æ—Å–∫–∞—á–µ—Å—Ç–≤–µ\n\n"
            "–Ø –ø–æ–∫–∞–∂—É:\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n"
            "- –¶–µ–Ω—É –∏ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞\n"
            "- –†–µ–π—Ç–∏–Ω–≥ –∏ –≥–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n"
            "- –°–æ—Å—Ç–∞–≤ –∏ –∞–ª–ª–µ—Ä–≥–µ–Ω—ã\n"
            "- –°—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
        )

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            photo_file = await update.message.photo[-1].get_file()
            image_bytes = io.BytesIO()
            await photo_file.download_to_memory(image_bytes)
            image_bytes.seek(0)

            barcode = self.decode_barcode(image_bytes)
            if not barcode:
                await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            product_info = await self.check_roskachestvo(barcode)
            if product_info:
                product_key = self._generate_product_key(product_info)
                self.product_cache[product_key] = product_info

                await self.send_product_info(update, product_info, product_key)
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {barcode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –†–æ—Å–∫–∞—á–µ—Å—Ç–≤–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    async def handle_analysis_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        product_key = query.data.split('_')[1]

        product_info = self.product_cache.get(product_key)

        if not product_info:
            await query.edit_message_text(text="‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.")
            return

        await query.edit_message_text(text=f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {product_info['name']} —Å –ø–æ–º–æ—â—å—é Qwen3...")

        try:
            analysis_result = await self.analyze_with_qwen(product_info)

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"ü§ñ *–ê–Ω–∞–ª–∏–∑ Qwen3 –¥–ª—è {product_info['name']}:*\n\n{analysis_result}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
            )

    def decode_barcode(self, image_bytes):
        try:
            image = Image.open(image_bytes)
            decoded = decode(image)
            return decoded[0].data.decode('utf-8') if decoded else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None

    async def check_roskachestvo(self, barcode):
        try:
            url = f"https://rskrf.ru/rest/1/search/barcode?barcode={barcode}"
            response = requests.get(url, timeout=20)

            if response.status_code == 200:
                data = response.json()

                if 'response' not in data or not data['response']:
                    return None

                product_data = data['response']

                return {
                    'name': product_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'brand': product_data.get('manufacturer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'composition': self._find_info(product_data.get('product_info', []), '–°–æ—Å—Ç–∞–≤'),
                    'country': self._find_region(product_data.get('product_info', [])),
                    'price': self._parse_price(product_data.get('price', '')),
                    'rating': product_data.get('total_rating', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                    'research_year': self._find_research_year(product_data.get('product_info', [])),
                    'link': product_data.get('product_link', ''),
                    'allergens': self.find_allergens(self._find_info(product_data.get('product_info', []), '–°–æ—Å—Ç–∞–≤'))
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –†–æ—Å–∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return None

    async def analyze_with_qwen(self, product_info: dict) -> str:
        try:
            prompt = f"""
                –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
                ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['name']}
                ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product_info['brand']}
                ‚Ä¢ –†–µ–≥–∏–æ–Ω: {product_info['country']}
                ‚Ä¢ –¶–µ–Ω–∞: {product_info['price']}
                ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {product_info['rating']}/5
                ‚Ä¢ –ì–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {product_info['research_year']}
                ‚Ä¢ –°–æ—Å—Ç–∞–≤: {product_info['composition']}
                ‚Ä¢ –ê–ª–ª–µ—Ä–≥–µ–Ω—ã: {', '.join(product_info['allergens']) or '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}
                ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç: {product_info['link']}

                –ó–∞–¥–∞—á–∞:  
                - –í—ã–¥–µ–ª–∏ 3 –≥–ª–∞–≤–Ω—ã—Ö –ø–ª—é—Å–∞ –∏ –º–∏–Ω—É—Å–∞.  
                - –û—Ü–µ–Ω–∏ –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å).  
                - –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é ("–†–µ–∫–æ–º–µ–Ω–¥—É—é/–ù–µ—Ç" –∏ –ø–æ—á–µ–º—É).  
                –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
                """

            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": SITE_URL,
                "X-Title": SITE_NAME
            }

            payload = {
                "model": "qwen/qwen3-14b:free",
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.4
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                        "https://openrouter.ai/api/v1/chat/completions",
                        headers=headers,
                        json=payload,
                        timeout=30
                ) as response:
                    response_data = await response.json()

                    if response.status != 200:
                        error_msg = response_data.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        logger.error(f"–û—à–∏–±–∫–∞ OpenRouter API: —Å—Ç–∞—Ç—É—Å {response.status}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_msg}")
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑: —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"

                    return response_data["choices"][0]["message"]["content"]

        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API")
            return "–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Qwen3: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–¥—É–∫—Ç–∞"

    def _find_info(self, product_info, target):
        for item in product_info:
            if item.get('name') == target:
                return item.get('info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

    def _find_region(self, product_info):
        return self._find_info(product_info, "–†–µ–≥–∏–æ–Ω")

    def _find_research_year(self, product_info):
        return self._find_info(product_info, "–ì–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    def _parse_price(self, price_str):
        if not price_str or not isinstance(price_str, str):
            return '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'

        price_str = (
            price_str.strip()
            .replace('—Ä—É–±', '‚ÇΩ')
            .replace('—Ä.', '‚ÇΩ')
            .replace(' ', '')
        )

        if '‚ÇΩ' in price_str and not price_str.startswith('‚ÇΩ'):
            price_str = price_str.replace('‚ÇΩ', ' ‚ÇΩ')

        return price_str

    def find_allergens(self, composition):
        if not composition or composition.lower() == "—Å–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω":
            return []

        found = []
        lower_comp = composition.lower()
        for allergen in self.allergens:
            if re.search(rf'\b{re.escape(allergen)}\b', lower_comp):
                found.append(allergen.capitalize())
        return found

    async def send_product_info(self, update, info, product_key):

        text = (
            "üèÖ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –†–æ—Å–∫–∞—á–µ—Å—Ç–≤–∞*\n\n"
            f"üì¶ *–¢–æ–≤–∞—Ä:* {info['name']}\n"
            f"üè≠ *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:* {info['brand']}\n"
            f"üåç *–†–µ–≥–∏–æ–Ω:* {info['country']}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {info['price']}\n"
            f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {info['rating']}/5\n"
            f"üìÖ *–ì–æ–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {info['research_year']}\n\n"
            f"üß™ *–°–æ—Å—Ç–∞–≤:* {info['composition']}"
        )

        if info['allergens']:
            text += f"\n‚ö†Ô∏è *–ê–ª–ª–µ—Ä–≥–µ–Ω—ã:* {', '.join(info['allergens'])}"

        text += f"\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({info['link']})"

        keyboard = [
            [InlineKeyboardButton("ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Qwen3", callback_data=f"analyze_{product_key}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)

    def run(self):
        self.application.run_polling()


if __name__ == '__main__':

    bot = RussianBarcodeBot()
    bot.run()
